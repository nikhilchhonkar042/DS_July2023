
82877658968
104673


MPR
---------------------------------------------------------------------
Pushpendra	Rajesh		Kunal		Nikhil
---------------------------------------------------------------------
Devendra	Prajakta	Maithili	Roshan	Vishal
---------------------------------------------------------------------
Omkar		Rohan		Sashwat		Aryan	Devyani
---------------------------------------------------------------------
Mitali		Akshay		Shruti		Pratik	Ratan
---------------------------------------------------------------------

GT
---------------------------------------------------------------------
Sujal		Pawan*		Shobhit*	Ankush*
---------------------------------------------------------------------
Anjali		Arya		Vikas		Paritosh
---------------------------------------------------------------------
Pallavi		Srijani*	Mihir		Darshan
---------------------------------------------------------------------
Pratiksha 	Salil 		Mayuresh	
---------------------------------------------------------------------

				who
				|role? 
		-----------------------------------
		|				|
		where				when
		|space				|time
	--------------------------------------------------
	|			|			|
	why			what			how
	reason			information		implementation
								|
							--------------
							|	   |
							success   feedback
	
		



	space+time+situation


			Java Technologies
				|
		---------------------------------
		|		|		|
		JSE		JEE		JME
		|		|		|	
		core		enterprise	micro [ android ]
		|		|		handheld devices [ mobile ]
	Language fundas		|
	OOPS concepts		------------------
	packages		|	|	|
	exception handling	EJB	Entity	Message
	multithreading		|Spring |	|JMS
				|	|	SMS Whatsapp Mail
	generics		|	---------	
	collections	    ---------	|	|	
	file handling	    |       |  BMP	CMP
	jdbc		Stateless  Stateful
	|		
Advanced Java
	Socket programming
	RMI
	
Persistence : means storing JAVA OBJECTS  on the database as a ROW
				|			      |
	DML+DQL			+-----------------------------+
insert/update/delete/select			|
					    ORM Tools [ Object Relational Mapping ]	
			


	Desktip Application, eg.	Calculator, MSPaint, MSWord
					   VS.
	Enterprise Application, e.g Book My Show, Currency Converter, Google Doc

	1. Remotely available
	2. High Availbaility
	3. Multithreaded
	4. Pooling of resources [ common users ]
	5. Caching of resources [ unique users identified by PK ]
	6. Tranaction management [ ACID properties ] 
	7. Security management [ https ]


	BACKEND | Java and DB
	|
	|To write REST API	class
	|			|		   <-----data--------->
URL	https://serverip:port/BankProject/addPayee/101/Suresh/BOB929292
	<---7-----1-2--3--->   4/5        6	 <--- can be java object values-->
	|				  |
	|				calls a 
	|				java function
	|
	|
	FRONT END | javascript + html + css + jquery + ajax
	index.html : <a href="URL"> Add Payee </a>



	7 Habits of Highly Effective People 

		u cannot decide your future
		but you can decide your habits [ neural network ] 
		and these habits will decide your future

		PRIVATE VICTORY
		1. Be Proactive
		2. Begin WITH the END in Mind
		3. Put First Thing First

		4. win-win

		PUBLIC VICTORY
		5. Seek First to understand, then to be understood
		6. Synergy
		7. Sharpen the SAW





			Java Programs 
				|
		-----------------------------------
		|		|		|
		Applications	Applets		Servlets
		|		|		|
		main()		no main		no main
				....		init,service,destroy

	com <--- folders / packages
	|
	dassault <-- folders / package
	|
	First.java <--- 
	First.class

First.java
--------------
package com.dassault;

public class First 
{	
	public static void main(String args[])
	{
		System.out.println("Hello World");
	}
}

		javac First.java
		java Second

class Jungle
{
	static Tiger tiger = new Tiger();
}
class Tiger
{
	void roar() {

	}
}
	Jungle.tiger.roar();

class System
{
	static PrintStream out = ....
}
class PrintStream
{
	void println() { }
}
	System.out.println();


Naming Conventions
--------------------

	0. ProjectName : PascalCase : FirstProject, MultithreadingProject

	1. ClassName : PascalCase : DriverManager, ResultSet, 

	2. variableName : camelCase : rollNumber, socialSecurityNumber

	3. methodName   : setLookAndFeel(), changeDepartmentName()

	4. CONSTANT : CAPITALS : MAX,MIN, PI, SPEED_OF_LIGHT
					GOD_IS_NO_WHERE
					GOD_IS_NOW_HERE

	5. packages : allsmalss : java.lang, java.awt.event 

	package Com.Ds;
	class driverManager {
		int RollNumber;

			void OpenConnection() {

			}
	}
	-----------------

	package com.ds;
	class DriverManager {
		int rollNumber;
		void openConnection() {
		
		}
	}
-----------------------------------------------

	Packages = similar to directories


		directory | folder : to organize the concerned files

			
				jungle
				|
		------------------------------------
		|	|	|	|	
		cave	river	tree	house
		|	|	|	|
		Tiger	Frog	Parrot	FarmHouse
		Lion	Fish	Monkey		- main()
		Bear	Duck	BengalTiger



		java
		|
		jungle.cave		jungle/cave - unix
					jungle\cave -- windows

		
		1.        <-- default package access           
		2. private
		3. protected
		4. public


Pushpendra Rajesh   Kunal  Nikhil 
Devendra   Prajakta Maithili Roshan Vishal
Omkar      Rohan    Sashwat  Aryan  Devyani
Mitali     Akshay   Shruti   Pratik Rathan


				Data Types
				|
	------------------------------------------------
	|						|
	Primitive					Secondary
	|							|
------------------------------------------------		Object [ root of the class hierarchy ]
|		|		|	 |			 |
Integral	Floating   Character  Boolean			-----------------------------
|		|		|	 |			|	 |		|
byte  1 	float  4	char 2	 boolean 1 false	String StringBuffer StringBuilder
short 2		double 8	ASCII+UNICODE	   true		 |
int   4								char *month="June"; strcmp(month,"january");;
long  8

	Windows		Windows		Linux
	TurboC		VC++		TurboC
	int		int		int
	2		4		4

		char alpha='A';


	0000 0000 0000 0000
	<-------> <------->
		  ASCII
	<---UNICODE------->







			Association 
			     |
		---------------------------------
		|	|		|	|
		isA	hasA		usesA	producesA



	class Machine
	{
	}

	class WashingMachine extends Machine
	{
	}


	Top to Bottom

	POPS = Procedure Oriented Programming System

		procedure() <--- data

		
		var1	var2	var3	var4	var5	var6	var7

				main() {
				}

		fun1()	fun2()	fun3()	fun4()	fun5()




	OOPS 

	Object Oriented Programming System
	-----------------------------------
		mind shift




                                main() {
    
                            }

	Bottom to Top
	------------------------------
	var1  var2
                fun1()  fun2()  
	------------------------------
	var3 var4 var5
	fun3()  fun4() 

	------------------------------
	var6 var7
	 fun5()
	------------------------------


	Classes				vs		Object
	|						|
is a blue print of an Object		      instance of a Class	
	

	simple text file			a real world memory object

	IDEA	

	class SavingsAccount			SavingsAccount savAccObj =
	{						new SavingsAccount();
		FILEDS(data members)
		+
		METHODS(member functions)	
	}

	design of the object			outcome of that design

	blueprint of a house			the actual house
	  					- land? soil?
	    					building material?
	    					roofs, briks,
	 paper, pencil, 
	drawing material

	-----------------------------------------------------------

	

	Constructor
	-------------


			-is a special code block
			- which has the same name as per enclosing classname

			- it does not have return type
			- it can take parameters | hence it can be overloaded
			
			- IT IS CALLED DURING OBJECT CREATION PROCESS

			- IT IS INVOKED AUTOMATICALLY

			- IT CANNOT BE CALLED POST OBJECT CONSTRUCTION

			- to initialize the object content

			- if a user defined constructor is not specified
			then JPL provides a default constructor

			- U CAN HAVE EITHER IMPLICIT OR EXPLICIT BUT NOT BOTH

	class Flight
	{
		<- there is a default constructor | IMPLICIT NO-ARG CTOR
	}
		
	class Book
	{
		Book() { // explicit no-arg constructor
		
		}
	}

		Book b1 = new Book();
		b1.Book(); //ERROR


Four Basic Function Types

	1. function without argument and without return value

		void clearScreen() {
		}

	2.  function with argument BUT  without return value

		void gotoLocation(float lattitude, float longitude){
		}

	3.  function with argument and   with return value

		float  findAverage(float value1, float value2){
			return (value1+value2)/2.0f;
		}

	4. function without argument, BUT with return value

		double calculateDistanceBetweenEarthAndSun() {	

			final INT TIME_TAKEN=480;
			final float SPEED_OF_LIGHT=186000.519;

			return TIME_TAKEN * SPEED_OF_LIGHT;
		}		
	

OOPS Concepts
-----------------

	1. Abstraction
		- it is the "what is ?" part of an object


		What is an ATM?
			- dispense cash!!!!

		i) data abstraction
		ii) procedural abstraction 
		iii) class abstraction
	
		- hiding the complexity of an object
		- providing the simplicity : USAGE of the object
			- via public / accessible functions

		
	2. Encapsulation
			
		- it is the "how is it?" part of object

		- binding of data with concerned function
			- data is kept as private
			


	3. Polymorhism
		
		ability of a business entity to have multiple forms

		a) class extension [ inheritance ]
		b) function overloading
			ability of a function to be redefined
			on following terms
			 i) number of parameters
			ii) type of parameters
			iii) type of sequence of parameters

		
		c) function overriding

			let subclass redefine the function 
			of its parent

			- hiding the function of the parent

		d)  operator overloading

			ability of an operator to participate
			objects in math expressions

	class Employee { }

	Employee e1,e2,e3;

	e3 = e1 + e2;

				Doctor
				|
			-------------------
			|
			Surgeon
			|
		-----------------
		|
	HeartSurgeon


				BankAccount
				|
		-------------------------------------
		|		|		|
	SavingsAccount	CurrentAccount	CreditCardAccount
	|
	------------
		|
	FixedDepositAccount











	4. Inheritance

		Derivation	 vs		Implementation
		|				|
		|				|
		Point2D <-super			MusicalInstrument <--abstract
		|x,y				|play();
		|show(){}			|
		|				|
		Point3D <--sub			StringBasedMusicalInstrument <--abstract
		|				|tuneStrings();
		|				|	
		ColouredPoint3 <--subD		Guitar
		|color				|play(){}
						|tuneStrings(){}

		a. single level
		b. multi level
		c. multiple level - interfaces
		d. hierarchical level
	


	5. Object communication

	

	Person
	|
	Student
	|
	Employee

				       
				       <--Person----> 
				       <-------------------Student------------------------>
				       <--------------------------Employee---------------------------------------------->
	Employee empObj = new Employee("Seema",'F',26,"Bharatee Vidyapeeth","Mech Eng",98.00,1012,"DS","Developer",250000);

	equals and hashCode			 (2)
	wait,wait,wait,notify,notifyAll		 (5)
	finalize, clone, toStrings(), getClass   (4)

			Object
			|11 methods
		------------
		|
		Person
		|
		Student
		|
		Employee

	class Person // extends java.lang.Object
	{
		Person() {
		  super();
		}
	}
	class Student extends Person
	{
		Student() {
		   super(); //default line of every ctor
		}	
	}
	class Employee extends Student {
		Employee() {
		  super();
		}
	}


this.	- points to the current class members, data/functions

this()  - invokes the ctor of the current class

super.  - points to the super class members, data/functions

super() - invokes the ctor of the nearest super class



					gender	name	age
					-------------------------
					|	|	|	|
					--------------------------
			+--------------->100
			|
			100
			personObj

	


			Association
			    |
		--------------------------
		|	|	|	|
		isA	hasA	usesA	produceA


	



	hasA = composition

		"a part" entity of the "whole entity"



	class Engine {
	}

	class Vehicle { }

	class Car extends Vehicle //isA - data type is affected, 
			//Car is also a Vehicle now
	{
		Engine engineObj = new Engine(); //as a data member - hasA
	}		//But Car is not Engine
			// Car hasAn Engine


	Bulb has a Filament

	Ovan hasA HeatingCoil

	Fridge has a Compressor

	Fan hasA Motor

	WashingMashine hasA WashingDrum/Tub

	Human hasA Heart

	vital part of the enclosing entity
	Engine			"Car"
	Heart			Human
	HeatingCoil		Ovan


	
	Person
	{
		gender,age,name
		AdhaarCard adhaarCard = new AdhaarCard();
		Address address = new Address(); //hasA
	}



	Passing object argument/parameter

	Returning Object as a return value




	BankApplicationForm bankAppForm1 = new BankApplicationForm();



					applicantName adresss	adhaarCard;panCard;mobileNumber;emailAddress;accountType;

		+----------------------->100
		|
		100
		bankAppForm1	

	-----------------------------------------

	Bank bank = new Bank();

	void	applyForBankAccount(BankApplicationForm bankAppFormRef)
	{
		bankAppFormRef.
	} 




	A thought = invisible, vibration (frequency), faster than light,
			in a non-linear way


	A thought - or +

	TEAR


	invisible	  =   visible

	unmanifested	  = manifested

	Thought + Feeling = Action + Result
	
	frequency	  = frequency
	
		




		





















